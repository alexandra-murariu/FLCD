%option noyywrap
%{ 	 
#include <math.h>
#include "spec.tab.h"
int lines = 0;
%} 

DIGIT     [0-9]
WORD      \"[a-zA-Z0-9]*\"
NUMBER    [+-]?[1-9][0-9]*|0$
CHARACTER  \'[a-zA-Z0-9_]\'
BOOLEAN      false|true
CONST     {WORD}|{NUMBER}|{CHARACTER}|{BOOLEAN}
ID            [_a-zA-Z]+[a-zA-Z0-9_]*
%% 

not {printf("Reserved word: %s\n", yytext); return NOT;}
and    {printf( "Reserved word: %s\n", yytext); return AND;}
or {printf( "Reserved word: %s\n", yytext); return OR;}
xor    {printf( "Reserved word: %s\n", yytext); return XOR;}
let    {printf( "Reserved word: %s\n", yytext); return LET;}
check  {printf( "Reserved word: %s\n", yytext); return CHECK;}
elsecheck  {printf( "Reserved word: %s\n", yytext); return ELSECHECK;}
else   {printf( "Reserved word: %s\n", yytext); return ELSE;}
for    {printf( "Reserved word: %s\n", yytext); return FOR;}
while  {printf( "Reserved word: %s\n", yytext); return WHILE;}
integer    {printf( "Reserved word: %s\n", yytext); return INTEGER;}
string {printf( "Reserved word: %s\n", yytext); return STRING;}
bool {printf( "Reserved word: %s\n", yytext); return BOOL;}
char   {printf( "Reserved word: %s\n", yytext); return CHAR;}
write  {printf( "Reserved word: %s\n", yytext); return WRITE;}
read   {printf( "Reserved word: %s\n", yytext); return READ;}

{ID}   {printf( "Identifier: %s\n", yytext ); return ID;}

{CONST}    {printf( "Constant: %s\n", yytext ); return CONST;}

"#"    {printf( "Separator: %s\n", yytext ); return HASH;}
"?"    {printf( "Separator: %s\n", yytext ); return QUESTIONMARK;}
"("    {printf( "Separator: %s\n", yytext ); return OPENPARA;}
")"    {printf( "Separator: %s\n", yytext ); return CLOSEDPARA;}
"["    {printf( "Separator: %s\n", yytext ); return OPENSQUAREPARA;}
"]"    {printf( "Separator: %s\n", yytext ); return CLOSEDSQUAREPARA;}
"{"    {printf( "Separator: %s\n", yytext ); return OPENCURLYPARA;}
"}"    {printf( "Separator: %s\n", yytext ); return CLOSEDCURLYPARA;}
";"    {printf( "Separator: %s\n", yytext ); return SEMICOLON;}
":"    {printf( "Separator: %s\n", yytext ); return COLON;}
"."    {printf( "Operator: %s\n", yytext ); return POINT;}
","    {printf( "Operator: %s\n", yytext ); return COMMA;}
"+"    {printf( "Operator: %s\n", yytext ); return PLUS;}
"-"    {printf( "Operator: %s\n", yytext ); return MINUS;}
"*"    {printf( "Operator: %s\n", yytext ); return MUL;}
"/"    {printf( "Operator: %s\n", yytext ); return DIV;}
"%"    {printf( "Operator: %s\n", yytext ); return MOD;}
"^"    {printf( "Operator: %s\n", yytext ); return POW;}
"="    {printf( "Operator: %s\n", yytext ); return EQUAL;}
"=="   {printf( "Operator: %s\n", yytext ); return EQUALEQUAL;}
"<"    {printf( "Operator: %s\n", yytext ); return LESS;}
"<="   {printf( "Separator: %s\n", yytext ); return LESSEQUAL;}
">"    {printf( "Operator: %s\n", yytext ); return GREATER;}
">="   {printf( "Operator: %s\n", yytext ); return GREATEREQUAL;}
"!="   {printf( "Operator: %s\n", yytext ); return NOTEQUAL;}



[ \t]+     {}
[\n]+ {lines++;}

\'[a-zA-Z0-9]{2,}\' {printf("Character of length >=2 at line %d\n", lines); return -1;}

. printf("Eroare\n");
%% 
main( argc, argv ) 
int argc; 
char **argv; 
{ 
    ++argv, --argc; /* skip over program name */ 
    if ( argc > 0 ) 
    yyin = fopen( argv[0], "r" ); 
    else 
     yyin = stdin; 
    yylex(); 
} 
