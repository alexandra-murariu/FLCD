%option noyywrap
%{
#include <math.h>
int lines = 0;
%}

DIGIT     [0-9]
WORD      \"[a-zA-Z0-9]*\"
NUMBER    [+-]?[1-9][0-9]*|0$
CHARACTER  \'[a-zA-Z0-9_]\'
BOOLEAN      false|true
CONST     {WORD}|{NUMBER}|{CHARACTER}|{BOOLEAN}
ID            [_a-zA-Z]+[a-zA-Z0-9_]*
%%

not {printf("Reserved word: %s\n", yytext);}
and    {printf( "Reserved word: %s\n", yytext);}
or {printf( "Reserved word: %s\n", yytext);}
xor    {printf( "Reserved word: %s\n", yytext);}
let    {printf( "Reserved word: %s\n", yytext);}
check  {printf( "Reserved word: %s\n", yytext);}
elsecheck  {printf( "Reserved word: %s\n", yytext);}
else   {printf( "Reserved word: %s\n", yytext);}
for    {printf( "Reserved word: %s\n", yytext);}
while  {printf( "Reserved word: %s\n", yytext);}
integer    {printf( "Reserved word: %s\n", yytext);}
string {printf( "Reserved word: %s\n", yytext);}
bool {printf( "Reserved word: %s\n", yytext);}
char   {printf( "Reserved word: %s\n", yytext);}
write  {printf( "Reserved word: %s\n", yytext);}
read   {printf( "Reserved word: %s\n", yytext);}

{ID}   {printf( "Identifier: %s\n", yytext );}

{CONST}    {printf( "Constant: %s\n", yytext );}

"#"    {printf( "Separator: %s\n", yytext );}
"?"    {printf( "Separator: %s\n", yytext );}
"("    {printf( "Separator: %s\n", yytext );}
")"    {printf( "Separator: %s\n", yytext );}
"["    {printf( "Separator: %s\n", yytext );}
"]"    {printf( "Separator: %s\n", yytext );}
"{"    {printf( "Separator: %s\n", yytext );}
"}"    {printf( "Separator: %s\n", yytext );}
";"    {printf( "Separator: %s\n", yytext );}
":"    {printf( "Separator: %s\n", yytext );}
"."    {printf( "Operator: %s\n", yytext );}
","    {printf( "Operator: %s\n", yytext );}
"+"    {printf( "Operator: %s\n", yytext );}
"-"    {printf( "Operator: %s\n", yytext );}
"*"    {printf( "Operator: %s\n", yytext );}
"/"    {printf( "Operator: %s\n", yytext );}
"%"    {printf( "Operator: %s\n", yytext );}
"^"    {printf( "Operator: %s\n", yytext );}
"="    {printf( "Operator: %s\n", yytext );}
"=="   {printf( "Operator: %s\n", yytext );}
"<"    {printf( "Operator: %s\n", yytext );}
"<="   {printf( "Separator: %s\n", yytext );}
">"    {printf( "Operator: %s\n", yytext );}
">="   {printf( "Operator: %s\n", yytext );}
"!="   {printf( "Operator: %s\n", yytext );}



[ \t]+     {}
[\n]+ {lines++;}

\'[a-zA-Z0-9]{2,}\' {printf("Character of length >=2 at line %d\n", lines); return -1;}

. printf("Eroare\n");
%%
main( argc, argv )
int argc;
char **argv;
{
    ++argv, --argc; /* skip over program name */
    if ( argc > 0 )
    yyin = fopen( argv[0], "r" );
    else
     yyin = stdin;
    yylex();
}
